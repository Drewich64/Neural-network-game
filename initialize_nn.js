let ReLU = (x) => x <= 0 ? 0 : x; let ReLU_prime = (x) => x <= 0 ? 0 : 1;
let sigmoid = (x) => 1 / (1 + Math.exp(-x)); let sigmoid_prime = (x) => sigmoid(x) * (1 - sigmoid(x));

let nn = new NeuralNetwork([4, 4, 2]);
nn.setActiv_f(ReLU, ReLU_prime);

let weights = [
    [
        [
            0.8976290414710895,
            0.5148291354425727,
            0.7833267408865816,
            0.8781232435750576
        ],
        [
            0.4549306967295696,
            0.8681010140558785,
            0.7230407431612734,
            0.3946755761472617
        ],
        [
            -0.17840292522719228,
            0.12403207393612542,
            0.8223930506477405,
            0.9130057058335087
        ],
        [
            0.92155275570118,
            0.23628972273372154,
            0.5409835494926001,
            0.8703183832362696
        ]
    ],
    [
        [
            -0.5943817929830507,
            -0.019879933305367876,
            -0.49830580469181396,
            -0.003916342217389833
        ],
        [
            -0.5594231347085687,
            -0.3519709226432404,
            0.43804189108824415,
            -0.19898838020569998
        ]
    ]
];
let biases = [
    [
        [
            -0.7289306396941169
        ],
        [
            0.09937792395264708
        ],
        [
            0.5468336400727017
        ],
        [
            0.7934054988387806
        ]
    ],
    [
        [
            1.2992373600272564
        ],
        [
            0.9136893700067483
        ]
    ]
];

nn.setParams([weights, biases]);